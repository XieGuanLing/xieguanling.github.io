下面使用个例子来说明状态模式的用法，现在有个自动售货机的代码需要我们来写，状态图如下：

a、包含4个状态（我们使用4个int型常量来表示）

b、包含3个暴露在外的方法（投币、退币、转动手柄）

c、我们需要处理每个状态下，用户都可以触发这三个动作。


-----------------------------------------
感觉还是不错的，基本实现了功能，但是有些事情是不可避免的，那就是需求的变化，
现在为了提升销量，当用户每次转动手柄买商品的时候，有10%的几率赠送一瓶。

把每个状态对应于动作的行为局部化到了状态自己的类中实现，不仅增加了扩展性而且使代码的阅读性大幅度的提高。
以后再添加状态，只需要针对新添加的状态的实现类，并在自动售货机中添加此状态即可



下面开始重构，我们现在有5种状态，对应4个动作（投币、退币、转动手柄、发出商品）



状态模式
特点：行为方法根据它能够控制的状态来变自身的行为。

javax.faces.lifecycle.LifeCycle#execute()由FacesServlet控制，它的行为依赖与当前JSF的生命周期所处的阶段
